info:
  app:
    organization: leijendary
    groupId: "@[project.groupId]"
    artifactId: "@[project.artifactId]"
    name: "@[project.name]"
    description: "@[project.description]"
    version: "@[project.version]"
  api:
    termsOfServiceUrl:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
    licenseUrl:
    vendorExtensions:

auth:
  audience: http://localhost:8080
  realm: Microservice Template API v1
  anonymousUser:
    principal: Anonymous User

cors:
  allowCredentials: true
  allowedOrigins:
  allowedOriginPatterns: '*'
  allowedHeaders: '*'
  allowedMethods:
    - get
    - post
    - put
    - patch
    - delete
    - options
    - head
    - trace
  exposedHeaders: '*'

spring:
  application:
    name: ${info.app.name}
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  datasource:
    url:
    username:
    password:
    hikari:
      dataSourceProperties:
        cachePrepStmts: true
        rewriteBatchedStatements: true
        useServerPrepStmts: true
  data:
    web:
      pageable:
        maxPageSize: 100
        oneIndexedParameters: true
  jpa:
    openInView: false
    properties:
      hibernate:
        jdbc:
          batch_size: 1000
  messages:
    basename: messages.access, messages.error, messages.validation
  cache:
    type: redis
    redis:
      timeToLive: 5h
  cloud:
    discovery:
      client:
        simple:
          instances:
            google:
              - uri: https://google.com
    loadbalancer:
      retry:
        maxRetriesOnSameServiceInstance: 3
        retryOnAllOperations: true
        retryableStatusCodes: 502,503,521
    serviceRegistry:
      autoRegistration:
        enabled: false
    stream:
      bindings:
        sampleCreated-in-0:
          destination: ${info.app.organization}.sample.create
        sampleCreate-out-0:
          destination: ${info.app.organization}.sample.create
          producer:
            useNativeEncoding: true
        sampleUpdated-in-0:
          destination: ${info.app.organization}.sample.update
        sampleUpdate-out-0:
          destination: ${info.app.organization}.sample.update
          producer:
            useNativeEncoding: true
        sampleDeleted-in-0:
          destination: ${info.app.organization}.sample.delete
        sampleDelete-out-0:
          destination: ${info.app.organization}.sample.delete
          producer:
            useNativeEncoding: true
      function:
        definition: sampleCreated;sampleUpdated;sampleDeleted;sampleCreate;sampleUpdate;sampleDelete
      kafka:
        binder:
          autoAddPartitions: true
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            functions:
              sampleCreate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.create
              sampleCreated:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.create
              sampleUpdate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.update
              sampleUpdated:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.update
              sampleDelete:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.delete
              sampleDeleted:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.delete
  elasticsearch:
    rest:
      uris:
  kafka:
    bootstrapServers:
    consumer:
      keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
      valueDeserializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroDeserializer
    producer:
      keySerializer: org.apache.kafka.common.serialization.StringSerializer
      valueSerializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
    properties:
      schema:
        registry:
          url:
  redis:
    host:
    ssl:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwkSetUri:

server:
  compression:
    enabled: true
    mimeTypes: application/json
  error:
    whitelabel:
      enabled: false
  http2:
    enabled: true
  servlet:
    contextPath: /sample
  tomcat:
    relaxedQueryChars: '[,]'
    threads:
      max: 500
