info:
  app:
    organization: leijendary
    group: ${group}
    name: ${name}
    description: ${description}
    version: ${version}
  api:
    termsOfService:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
      name: Jonathan Leijendekker
      url: https://leijendary.com

auth:
  anonymousUser:
    principal: Anonymous User
  system:
    principal: System

encrypt:
  key:
  salt:

number:
  scale: 2
  round: HALF_UP

retry:
  maxAttempts: 3
  backoff:
    delay: 5
    maxDelay: 20
    multiplier: 2

spring:
  application:
    name: \${info.app.name}
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  datasource:
    primary:
      poolName: Primary
      jdbcUrl:
      username:
      password:
      dataSourceProperties:
        cachePrepStmts: true
        rewriteBatchedStatements: true
        useServerPrepStmts: true
      maximumPoolSize: 20
      driverClassName: org.postgresql.Driver
    readonly:
      poolName: Read-only
      jdbcUrl:
      username:
      password:
      maximumPoolSize: 5
      driverClassName: org.postgresql.Driver
  data:
    web:
      pageable:
        maxPageSize: 100
  devtools:
    livereload:
      port: 35730
  jpa:
    openInView: false
    properties:
      hibernate:
        jdbc:
          batch_size: 1000
      javax:
        persistence:
          lock:
            timeout: 2000
  messages:
    basename: messages.error, messages.validation
  mvc:
    throwExceptionIfNoHandlerFound: true
  task:
    execution:
      shutdown:
        awaitTermination: true
        awaitTerminationPeriod: 60s
    scheduling:
      pool:
        size: 20
      shutdown:
        awaitTermination: true
        awaitTerminationPeriod: 60s
  web:
    resources:
      addMappings: false
  cache:
    type: redis
    redis:
      timeToLive: 5h
  cloud:
    discovery:
      client:
        simple:
          instances:
            google:
              - uri: https://google.com
    loadbalancer:
      retry:
        maxRetriesOnSameServiceInstance: 3
        retryOnAllOperations: true
        retryableStatusCodes:
          - 502
          - 503
        backoff:
          enabled: true
          minBackoff: \${retry.backoff.delay}ms
          maxBackoff: \${retry.backoff.maxDelay}ms
          jitter: \${retry.backoff.multiplier}
    serviceRegistry:
      autoRegistration:
        enabled: false
    function:
      definition: sampleCreated;sampleUpdated;sampleDeleted
    stream:
      bindings:
        sampleCreated-in-0:
          destination: \${info.app.organization}.sample.create
        sampleCreate-out-0:
          destination: \${info.app.organization}.sample.create
        sampleUpdated-in-0:
          destination: \${info.app.organization}.sample.update
        sampleUpdate-out-0:
          destination: \${info.app.organization}.sample.update
        sampleDeleted-in-0:
          destination: \${info.app.organization}.sample.delete
        sampleDelete-out-0:
          destination: \${info.app.organization}.sample.delete
      kafka:
        binder:
          autoAddPartitions: true
        streams:
          binder:
            functions:
              sampleCreate:
                applicationId: \${info.app.name}.\${info.app.organization}.sample.create
              sampleCreated:
                applicationId: \${info.app.name}.\${info.app.organization}.sample.create
              sampleUpdate:
                applicationId: \${info.app.name}.\${info.app.organization}.sample.update
              sampleUpdated:
                applicationId: \${info.app.name}.\${info.app.organization}.sample.update
              sampleDelete:
                applicationId: \${info.app.name}.\${info.app.organization}.sample.delete
              sampleDeleted:
                applicationId: \${info.app.name}.\${info.app.organization}.sample.delete
  elasticsearch:
    uris:
  kafka:
    bootstrapServers:
    producer:
      properties:
        spring:
          json:
            add:
              type:
                headers: false
  redis:
    host:
    port:

management:
  endpoint:
    health:
      showDetails: ALWAYS

server:
  error:
    whitelabel:
      enabled: false
  http2:
    enabled: true
  port: 80
  tomcat:
    threads:
      max: 500

springdoc:
  pathsToMatch: /api/**

logging:
  level:
    liquibase:
      hub: ERROR
    org:
      apache:
        kafka: ERROR
      springframework:
        data:
          elasticsearch:
            support:
              VersionInfo: ERROR
