info:
  app:
    organization: leijendary
    groupId: "@[project.groupId]"
    artifactId: "@[project.artifactId]"
    name: "@[project.name]"
    description: "@[project.description]"
    version: "@[project.version]"
  api:
    termsOfServiceUrl:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
    licenseUrl:
    vendorExtensions:

auth:
  audience: http://localhost:8080
  realm: Spring Template API v1
  anonymousUser:
    principal: Anonymous User

encrypt:
  key:
  salt:

spring:
  application:
    name: ${info.app.name}
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  datasource:
    primary:
      poolName: Primary
      jdbcUrl:
      username:
      password:
      dataSourceProperties:
        cachePrepStmts: true
        rewriteBatchedStatements: true
        useServerPrepStmts: true
      maximumPoolSize: 20
    readonly:
      poolName: Read-only
      jdbcUrl:
      username:
      password:
      maximumPoolSize: 5
  data:
    web:
      pageable:
        maxPageSize: 100
        oneIndexedParameters: true
  jpa:
    openInView: false
    properties:
      hibernate:
        jdbc:
          batch_size: 1000
      javax:
        persistence:
          lock:
            timeout: 3000
  messages:
    basename: messages.access, messages.error, messages.validation
  mvc:
    throwExceptionIfNoHandlerFound: true
  web:
    resources:
      addMappings: false
  cache:
    type: redis
    redis:
      timeToLive: 5h
  cloud:
    discovery:
      client:
        simple:
          instances:
            google:
              - uri: https://google.com
    loadbalancer:
      retry:
        maxRetriesOnSameServiceInstance: 3
        retryOnAllOperations: true
        retryableStatusCodes: 502,503,521
    serviceRegistry:
      autoRegistration:
        enabled: false
    stream:
      bindings:
        sampleCreated-in-0:
          destination: ${info.app.organization}.sample.create
        sampleCreate-out-0:
          destination: ${info.app.organization}.sample.create
        sampleUpdated-in-0:
          destination: ${info.app.organization}.sample.update
        sampleUpdate-out-0:
          destination: ${info.app.organization}.sample.update
        sampleDeleted-in-0:
          destination: ${info.app.organization}.sample.delete
        sampleDelete-out-0:
          destination: ${info.app.organization}.sample.delete
      function:
        definition: sampleCreated;sampleUpdated;sampleDeleted
      kafka:
        binder:
          autoAddPartitions: true
        streams:
          binder:
            functions:
              sampleCreate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.create
              sampleCreated:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.create
              sampleUpdate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.update
              sampleUpdated:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.update
              sampleDelete:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.delete
              sampleDeleted:
                applicationId: ${info.app.artifactId}.${info.app.organization}.sample.delete
  elasticsearch:
    rest:
      uris: http://localhost:9200
  kafka:
    bootstrapServers: localhost:9092
    producer:
      properties:
        spring:
          json:
            add:
              type:
                headers: false
  redis:
    host: localhost
    ssl: false
  security:
    oauth2:
      resourceserver:
        jwt:
          jwkSetUri: https://leijendary.us.auth0.com/.well-known/jwks.json

management:
  endpoint:
    health:
      showDetails: ALWAYS

server:
  error:
    whitelabel:
      enabled: false
  http2:
    enabled: true
  port: 443
  servlet:
    contextPath: /sample
  ssl:
    enabled: true
    keyAlias: spring-boot
    keyStoreType: PKCS12
    keyStore: classpath:ssl/keystore.p12
    keyStorePassword: spring-boot
  tomcat:
    relaxedQueryChars: "[,]"
    threads:
      max: 500

logging:
  level:
    liquibase:
      hub: ERROR
    org:
      apache:
        kafka: ERROR
      springframework:
        data:
          elasticsearch:
            support:
              VersionInfo: ERROR
